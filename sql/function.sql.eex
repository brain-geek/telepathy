CREATE OR REPLACE FUNCTION notify_table_changes()
RETURNS trigger AS $$
BEGIN
  CASE TG_OP 
    WHEN 'INSERT' THEN
      PERFORM pg_notify(
        '<%= channel_name %>',
        json_build_object(
          'table', TG_TABLE_NAME,
          'type', TG_OP,
          'old_data', NULL,
          'new_data', row_to_json(NEW)
        )::text
      );
    WHEN 'UPDATE' THEN
      PERFORM pg_notify(
        '<%= channel_name %>',
        json_build_object(
          'table', TG_TABLE_NAME,
          'type', TG_OP,
          'old_data', row_to_json(OLD),
          'new_data', row_to_json(NEW)
        )::text
      );
    WHEN 'DELETE' then
      PERFORM pg_notify(
        '<%= channel_name %>',
        json_build_object(
          'table', TG_TABLE_NAME,
          'type', TG_OP,
          'old_data', row_to_json(OLD),
          'new_data', NULL
        )::text
      );
    ELSE
      PERFORM pg_notify(
        '<%= channel_name %>',
        json_build_object(
          'table', TG_TABLE_NAME,
          'type', TG_OP,
          'error', 'Trigger fired for unknown operation'
        )::text
      );
  END CASE;

  RETURN NULL;
END;
$$ LANGUAGE plpgsql
RETURNS NULL ON NULL INPUT;